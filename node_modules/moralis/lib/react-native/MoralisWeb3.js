var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.EthereumEvents = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _construct2 = _interopRequireDefault(require("@babel/runtime/helpers/construct"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _web = _interopRequireDefault(require("web3"));

var _ParseObject = _interopRequireDefault(require("./ParseObject"));

var _ParseQuery = _interopRequireDefault(require("./ParseQuery"));

var _ParseUser = _interopRequireDefault(require("./ParseUser"));

var _ParseACL = _interopRequireDefault(require("./ParseACL"));

var _MoralisErd = _interopRequireDefault(require("./MoralisErd"));

var _MoralisDot = _interopRequireDefault(require("./MoralisDot"));

var _Cloud = require("./Cloud");

var EthereumEvents = {
  CONNECT: 'connect',
  DISCONNECT: 'disconnect',
  ACCOUNTS_CHANGED: 'accountsChanged',
  CHAIN_CHANGED: 'chainChanged'
};
exports.EthereumEvents = EthereumEvents;
var WARNING = 'Non ethereum enabled browser';

function uniq(arr) {
  return arr.filter(function (v, i) {
    return arr.indexOf(v) === i;
  });
}

var MoralisWeb3 = function () {
  function MoralisWeb3() {
    (0, _classCallCheck2.default)(this, MoralisWeb3);
    var MWeb3 = typeof _web.default === 'function' ? _web.default : window.Web3;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return (0, _construct2.default)(MWeb3, args);
  }

  (0, _createClass2.default)(MoralisWeb3, null, [{
    key: "enable",
    value: function () {
      var _window$web;

      var MWeb3, provider, ethereum, web3;
      return _regenerator.default.async(function (_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              MWeb3 = typeof _web.default === 'function' ? _web.default : window.Web3;
              provider = (_window$web = window.web3) == null ? void 0 : _window$web.currentProvider;
              ethereum = window.ethereum;

              if (!(provider != null && provider.isTrust)) {
                _context.next = 5;
                break;
              }

              return _context.abrupt("return", new MWeb3(provider));

            case 5:
              if (!ethereum) {
                _context.next = 10;
                break;
              }

              web3 = new MWeb3(ethereum);
              _context.next = 9;
              return _regenerator.default.awrap(ethereum.enable());

            case 9:
              return _context.abrupt("return", web3);

            case 10:
              if (!provider) {
                _context.next = 12;
                break;
              }

              return _context.abrupt("return", new MWeb3(provider));

            case 12:
              throw new Error(WARNING);

            case 13:
            case "end":
              return _context.stop();
          }
        }
      }, null, null, null, Promise);
    }
  }, {
    key: "isDotAuth",
    value: function (options) {
      switch (options == null ? void 0 : options.type) {
        case 'dot':
        case 'polkadot':
        case 'kusama':
          return true;

        default:
          return false;
      }
    }
  }, {
    key: "isElrondAuth",
    value: function (options) {
      switch (options == null ? void 0 : options.type) {
        case 'erd':
        case 'elrond':
          return true;

        default:
          return false;
      }
    }
  }, {
    key: "authenticate",
    value: function (options) {
      var _user$get;

      var isLoggedIn, web3, data, accounts, accountsLower, _accountsLower, ethAddress, signature, authData, user;

      return _regenerator.default.async(function (_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return _regenerator.default.awrap(_ParseUser.default.current());

            case 2:
              isLoggedIn = _context2.sent;

              if (!isLoggedIn) {
                _context2.next = 6;
                break;
              }

              _context2.next = 6;
              return _regenerator.default.awrap(_ParseUser.default.logOut());

            case 6:
              if (!MoralisWeb3.isDotAuth(options)) {
                _context2.next = 8;
                break;
              }

              return _context2.abrupt("return", _MoralisDot.default.authenticate(options));

            case 8:
              if (!MoralisWeb3.isElrondAuth(options)) {
                _context2.next = 10;
                break;
              }

              return _context2.abrupt("return", _MoralisErd.default.authenticate(options));

            case 10:
              _context2.next = 12;
              return _regenerator.default.awrap(MoralisWeb3.enable());

            case 12:
              web3 = _context2.sent;
              data = MoralisWeb3.getSigningData();
              _context2.next = 16;
              return _regenerator.default.awrap(web3.eth.getAccounts());

            case 16:
              accounts = _context2.sent;
              accountsLower = accounts.map(function (v) {
                return v.toLowerCase();
              });
              _accountsLower = (0, _slicedToArray2.default)(accountsLower, 1), ethAddress = _accountsLower[0];

              if (ethAddress) {
                _context2.next = 21;
                break;
              }

              throw new Error('Address not found');

            case 21:
              _context2.next = 23;
              return _regenerator.default.awrap(web3.eth.personal.sign(data, ethAddress, ''));

            case 23:
              signature = _context2.sent;

              if (signature) {
                _context2.next = 26;
                break;
              }

              throw new Error('Data not signed');

            case 26:
              authData = {
                id: ethAddress,
                signature: signature,
                data: data
              };
              _context2.next = 29;
              return _regenerator.default.awrap(_ParseUser.default.logInWith('moralisEth', {
                authData: authData
              }));

            case 29:
              user = _context2.sent;
              _context2.next = 32;
              return _regenerator.default.awrap(user.setACL(new _ParseACL.default(user)));

            case 32:
              if (user) {
                _context2.next = 34;
                break;
              }

              throw new Error('Could not get user');

            case 34:
              user.set('accounts', uniq([].concat(accountsLower, (_user$get = user.get('accounts')) != null ? _user$get : [])));
              user.set('ethAddress', ethAddress);
              _context2.next = 38;
              return _regenerator.default.awrap(user.save());

            case 38:
              return _context2.abrupt("return", user);

            case 39:
            case "end":
              return _context2.stop();
          }
        }
      }, null, null, null, Promise);
    }
  }, {
    key: "link",
    value: function (account) {
      var _user$get2;

      var web3, data, user, ethAddress, EthAddress, query, ethAddressRecord, signature, authData;
      return _regenerator.default.async(function (_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return _regenerator.default.awrap(MoralisWeb3.enable());

            case 2:
              web3 = _context3.sent;
              data = MoralisWeb3.getSigningData();
              _context3.next = 6;
              return _regenerator.default.awrap(_ParseUser.default.current());

            case 6:
              user = _context3.sent;
              ethAddress = account.toLowerCase();
              EthAddress = _ParseObject.default.extend('_EthAddress');
              query = new _ParseQuery.default(EthAddress);
              _context3.next = 12;
              return _regenerator.default.awrap(query.get(ethAddress).catch(function () {
                return null;
              }));

            case 12:
              ethAddressRecord = _context3.sent;

              if (ethAddressRecord) {
                _context3.next = 20;
                break;
              }

              _context3.next = 16;
              return _regenerator.default.awrap(web3.eth.personal.sign(data, account, ''));

            case 16:
              signature = _context3.sent;
              authData = {
                id: ethAddress,
                signature: signature,
                data: data
              };
              _context3.next = 20;
              return _regenerator.default.awrap(user.linkWith('moralisEth', {
                authData: authData
              }));

            case 20:
              user.set('accounts', uniq([ethAddress].concat((_user$get2 = user.get('accounts')) != null ? _user$get2 : [])));
              user.set('ethAddress', ethAddress);
              _context3.next = 24;
              return _regenerator.default.awrap(user.save());

            case 24:
              return _context3.abrupt("return", user);

            case 25:
            case "end":
              return _context3.stop();
          }
        }
      }, null, null, null, Promise);
    }
  }, {
    key: "unlink",
    value: function (account) {
      var _user$get3;

      var accountsLower, EthAddress, query, ethAddressRecord, user, accounts, nextAccounts;
      return _regenerator.default.async(function (_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              accountsLower = account.toLowerCase();
              EthAddress = _ParseObject.default.extend('_EthAddress');
              query = new _ParseQuery.default(EthAddress);
              _context4.next = 5;
              return _regenerator.default.awrap(query.get(accountsLower));

            case 5:
              ethAddressRecord = _context4.sent;
              _context4.next = 8;
              return _regenerator.default.awrap(ethAddressRecord.destroy());

            case 8:
              _context4.next = 10;
              return _regenerator.default.awrap(_ParseUser.default.current());

            case 10:
              user = _context4.sent;
              accounts = (_user$get3 = user.get('accounts')) != null ? _user$get3 : [];
              nextAccounts = accounts.filter(function (v) {
                return v !== accountsLower;
              });
              user.set('accounts', nextAccounts);
              user.set('ethAddress', nextAccounts[0]);
              _context4.next = 17;
              return _regenerator.default.awrap(user._unlinkFrom('moralisEth'));

            case 17:
              _context4.next = 19;
              return _regenerator.default.awrap(user.save());

            case 19:
              return _context4.abrupt("return", user);

            case 20:
            case "end":
              return _context4.stop();
          }
        }
      }, null, null, null, Promise);
    }
  }, {
    key: "getAllERC20",
    value: function () {
      var _ref,
          chain,
          address,
          result,
          _args5 = arguments;

      return _regenerator.default.async(function (_context5) {
        while (1) {
          switch (_context5.prev = _context5.next) {
            case 0:
              _ref = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : {}, chain = _ref.chain, address = _ref.address;
              _context5.next = 3;
              return _regenerator.default.awrap((0, _Cloud.run)('getAllERC20', {
                chain: chain,
                address: address
              }));

            case 3:
              result = _context5.sent;
              return _context5.abrupt("return", result);

            case 5:
            case "end":
              return _context5.stop();
          }
        }
      }, null, null, null, Promise);
    }
  }, {
    key: "getERC20",
    value: function () {
      var _ref2,
          chain,
          address,
          symbol,
          result,
          _args6 = arguments;

      return _regenerator.default.async(function (_context6) {
        while (1) {
          switch (_context6.prev = _context6.next) {
            case 0:
              _ref2 = _args6.length > 0 && _args6[0] !== undefined ? _args6[0] : {}, chain = _ref2.chain, address = _ref2.address, symbol = _ref2.symbol;
              result = (0, _Cloud.run)('getERC20', {
                chain: chain,
                address: address,
                symbol: symbol
              });
              return _context6.abrupt("return", result);

            case 3:
            case "end":
              return _context6.stop();
          }
        }
      }, null, null, null, Promise);
    }
  }, {
    key: "getNFTs",
    value: function () {
      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref3$chain = _ref3.chain,
          chain = _ref3$chain === void 0 ? 'Eth' : _ref3$chain,
          _ref3$address = _ref3.address,
          address = _ref3$address === void 0 ? '' : _ref3$address;

      return (0, _Cloud.run)('getNFTs', {
        chain: chain,
        address: address
      });
    }
  }, {
    key: "getNFTsCount",
    value: function () {
      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref4$chain = _ref4.chain,
          chain = _ref4$chain === void 0 ? 'Eth' : _ref4$chain,
          _ref4$address = _ref4.address,
          address = _ref4$address === void 0 ? '' : _ref4$address;

      return (0, _Cloud.run)('getNFTsCount', {
        chain: chain,
        address: address
      });
    }
  }, {
    key: "getTransactions",
    value: function () {
      var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref5$chain = _ref5.chain,
          chain = _ref5$chain === void 0 ? 'Eth' : _ref5$chain,
          _ref5$address = _ref5.address,
          address = _ref5$address === void 0 ? '' : _ref5$address,
          _ref5$order = _ref5.order,
          order = _ref5$order === void 0 ? 'desc' : _ref5$order;

      return (0, _Cloud.run)('getTransactions', {
        chain: chain,
        address: address,
        order: order
      });
    }
  }, {
    key: "getTransactionsCount",
    value: function () {
      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
          _ref6$chain = _ref6.chain,
          chain = _ref6$chain === void 0 ? 'Eth' : _ref6$chain,
          _ref6$address = _ref6.address,
          address = _ref6$address === void 0 ? '' : _ref6$address;

      return (0, _Cloud.run)('getTransactionsCount', {
        chain: chain,
        address: address
      });
    }
  }, {
    key: "on",
    value: function (eventName, cb) {
      var ethereum = window.ethereum;

      if (!ethereum || !ethereum.on) {
        console.warn(WARNING);
        return function () {
          console.warn(WARNING);
        };
      }

      ethereum.on(eventName, cb);
      return function () {
        console.warn('UNSUB NOT SUPPORTED');
      };
    }
  }, {
    key: "getSigningData",
    value: function () {
      return "Moralis Authentication";
    }
  }]);
  return MoralisWeb3;
}();

MoralisWeb3.onConnect = MoralisWeb3.on.bind(MoralisWeb3, EthereumEvents.CONNECT);
MoralisWeb3.onDisconnect = MoralisWeb3.on.bind(MoralisWeb3, EthereumEvents.DISCONNECT);
MoralisWeb3.onChainChanged = MoralisWeb3.on.bind(MoralisWeb3, EthereumEvents.CHAIN_CHANGED);
MoralisWeb3.onAccountsChanged = MoralisWeb3.on.bind(MoralisWeb3, EthereumEvents.ACCOUNTS_CHANGED);
var _default = MoralisWeb3;
exports.default = _default;